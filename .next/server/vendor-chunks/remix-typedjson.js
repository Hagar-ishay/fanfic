"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/remix-typedjson";
exports.ids = ["vendor-chunks/remix-typedjson"];
exports.modules = {

/***/ "(ssr)/./node_modules/remix-typedjson/dist/index.js":
/*!****************************************************!*\
  !*** ./node_modules/remix-typedjson/dist/index.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.stringify = exports.serialize = exports.registerCustomType = exports.parse = exports.deserialize = exports.applyMeta = exports.useTypedRouteLoaderData = exports.useTypedLoaderData = exports.useTypedFetcher = exports.useTypedActionData = exports.typedjson = exports.typeddefer = exports.stringifyRemix = exports.redirect = exports.deserializeRemix = exports.TypedAwait = void 0;\nvar remix_1 = __webpack_require__(/*! ./remix */ \"(ssr)/./node_modules/remix-typedjson/dist/remix.js\");\nObject.defineProperty(exports, \"TypedAwait\", ({ enumerable: true, get: function () { return remix_1.TypedAwait; } }));\nObject.defineProperty(exports, \"deserializeRemix\", ({ enumerable: true, get: function () { return remix_1.deserializeRemix; } }));\nObject.defineProperty(exports, \"redirect\", ({ enumerable: true, get: function () { return remix_1.redirect; } }));\nObject.defineProperty(exports, \"stringifyRemix\", ({ enumerable: true, get: function () { return remix_1.stringifyRemix; } }));\nObject.defineProperty(exports, \"typeddefer\", ({ enumerable: true, get: function () { return remix_1.typeddefer; } }));\nObject.defineProperty(exports, \"typedjson\", ({ enumerable: true, get: function () { return remix_1.typedjson; } }));\nObject.defineProperty(exports, \"useTypedActionData\", ({ enumerable: true, get: function () { return remix_1.useTypedActionData; } }));\nObject.defineProperty(exports, \"useTypedFetcher\", ({ enumerable: true, get: function () { return remix_1.useTypedFetcher; } }));\nObject.defineProperty(exports, \"useTypedLoaderData\", ({ enumerable: true, get: function () { return remix_1.useTypedLoaderData; } }));\nObject.defineProperty(exports, \"useTypedRouteLoaderData\", ({ enumerable: true, get: function () { return remix_1.useTypedRouteLoaderData; } }));\nvar typedjson_1 = __webpack_require__(/*! ./typedjson */ \"(ssr)/./node_modules/remix-typedjson/dist/typedjson.js\");\nObject.defineProperty(exports, \"applyMeta\", ({ enumerable: true, get: function () { return typedjson_1.applyMeta; } }));\nObject.defineProperty(exports, \"deserialize\", ({ enumerable: true, get: function () { return typedjson_1.deserialize; } }));\nObject.defineProperty(exports, \"parse\", ({ enumerable: true, get: function () { return typedjson_1.parse; } }));\nObject.defineProperty(exports, \"registerCustomType\", ({ enumerable: true, get: function () { return typedjson_1.registerCustomType; } }));\nObject.defineProperty(exports, \"serialize\", ({ enumerable: true, get: function () { return typedjson_1.serialize; } }));\nObject.defineProperty(exports, \"stringify\", ({ enumerable: true, get: function () { return typedjson_1.stringify; } }));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVtaXgtdHlwZWRqc29uL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsaUJBQWlCLEdBQUcsaUJBQWlCLEdBQUcsMEJBQTBCLEdBQUcsYUFBYSxHQUFHLG1CQUFtQixHQUFHLGlCQUFpQixHQUFHLCtCQUErQixHQUFHLDBCQUEwQixHQUFHLHVCQUF1QixHQUFHLDBCQUEwQixHQUFHLGlCQUFpQixHQUFHLGtCQUFrQixHQUFHLHNCQUFzQixHQUFHLGdCQUFnQixHQUFHLHdCQUF3QixHQUFHLGtCQUFrQjtBQUN2WCxjQUFjLG1CQUFPLENBQUMsbUVBQVM7QUFDL0IsOENBQTZDLEVBQUUscUNBQXFDLDhCQUE4QixFQUFDO0FBQ25ILG9EQUFtRCxFQUFFLHFDQUFxQyxvQ0FBb0MsRUFBQztBQUMvSCw0Q0FBMkMsRUFBRSxxQ0FBcUMsNEJBQTRCLEVBQUM7QUFDL0csa0RBQWlELEVBQUUscUNBQXFDLGtDQUFrQyxFQUFDO0FBQzNILDhDQUE2QyxFQUFFLHFDQUFxQyw4QkFBOEIsRUFBQztBQUNuSCw2Q0FBNEMsRUFBRSxxQ0FBcUMsNkJBQTZCLEVBQUM7QUFDakgsc0RBQXFELEVBQUUscUNBQXFDLHNDQUFzQyxFQUFDO0FBQ25JLG1EQUFrRCxFQUFFLHFDQUFxQyxtQ0FBbUMsRUFBQztBQUM3SCxzREFBcUQsRUFBRSxxQ0FBcUMsc0NBQXNDLEVBQUM7QUFDbkksMkRBQTBELEVBQUUscUNBQXFDLDJDQUEyQyxFQUFDO0FBQzdJLGtCQUFrQixtQkFBTyxDQUFDLDJFQUFhO0FBQ3ZDLDZDQUE0QyxFQUFFLHFDQUFxQyxpQ0FBaUMsRUFBQztBQUNySCwrQ0FBOEMsRUFBRSxxQ0FBcUMsbUNBQW1DLEVBQUM7QUFDekgseUNBQXdDLEVBQUUscUNBQXFDLDZCQUE2QixFQUFDO0FBQzdHLHNEQUFxRCxFQUFFLHFDQUFxQywwQ0FBMEMsRUFBQztBQUN2SSw2Q0FBNEMsRUFBRSxxQ0FBcUMsaUNBQWlDLEVBQUM7QUFDckgsNkNBQTRDLEVBQUUscUNBQXFDLGlDQUFpQyxFQUFDIiwic291cmNlcyI6WyIvVXNlcnMvaGFnYXIuaXNoYXkvZmFuZmljL25vZGVfbW9kdWxlcy9yZW1peC10eXBlZGpzb24vZGlzdC9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc3RyaW5naWZ5ID0gZXhwb3J0cy5zZXJpYWxpemUgPSBleHBvcnRzLnJlZ2lzdGVyQ3VzdG9tVHlwZSA9IGV4cG9ydHMucGFyc2UgPSBleHBvcnRzLmRlc2VyaWFsaXplID0gZXhwb3J0cy5hcHBseU1ldGEgPSBleHBvcnRzLnVzZVR5cGVkUm91dGVMb2FkZXJEYXRhID0gZXhwb3J0cy51c2VUeXBlZExvYWRlckRhdGEgPSBleHBvcnRzLnVzZVR5cGVkRmV0Y2hlciA9IGV4cG9ydHMudXNlVHlwZWRBY3Rpb25EYXRhID0gZXhwb3J0cy50eXBlZGpzb24gPSBleHBvcnRzLnR5cGVkZGVmZXIgPSBleHBvcnRzLnN0cmluZ2lmeVJlbWl4ID0gZXhwb3J0cy5yZWRpcmVjdCA9IGV4cG9ydHMuZGVzZXJpYWxpemVSZW1peCA9IGV4cG9ydHMuVHlwZWRBd2FpdCA9IHZvaWQgMDtcbnZhciByZW1peF8xID0gcmVxdWlyZShcIi4vcmVtaXhcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJUeXBlZEF3YWl0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiByZW1peF8xLlR5cGVkQXdhaXQ7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZXNlcmlhbGl6ZVJlbWl4XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiByZW1peF8xLmRlc2VyaWFsaXplUmVtaXg7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJyZWRpcmVjdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVtaXhfMS5yZWRpcmVjdDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInN0cmluZ2lmeVJlbWl4XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiByZW1peF8xLnN0cmluZ2lmeVJlbWl4OyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidHlwZWRkZWZlclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVtaXhfMS50eXBlZGRlZmVyOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidHlwZWRqc29uXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiByZW1peF8xLnR5cGVkanNvbjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInVzZVR5cGVkQWN0aW9uRGF0YVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVtaXhfMS51c2VUeXBlZEFjdGlvbkRhdGE7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ1c2VUeXBlZEZldGNoZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlbWl4XzEudXNlVHlwZWRGZXRjaGVyOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidXNlVHlwZWRMb2FkZXJEYXRhXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiByZW1peF8xLnVzZVR5cGVkTG9hZGVyRGF0YTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInVzZVR5cGVkUm91dGVMb2FkZXJEYXRhXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiByZW1peF8xLnVzZVR5cGVkUm91dGVMb2FkZXJEYXRhOyB9IH0pO1xudmFyIHR5cGVkanNvbl8xID0gcmVxdWlyZShcIi4vdHlwZWRqc29uXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiYXBwbHlNZXRhXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0eXBlZGpzb25fMS5hcHBseU1ldGE7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZXNlcmlhbGl6ZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdHlwZWRqc29uXzEuZGVzZXJpYWxpemU7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJwYXJzZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdHlwZWRqc29uXzEucGFyc2U7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJyZWdpc3RlckN1c3RvbVR5cGVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHR5cGVkanNvbl8xLnJlZ2lzdGVyQ3VzdG9tVHlwZTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInNlcmlhbGl6ZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdHlwZWRqc29uXzEuc2VyaWFsaXplOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwic3RyaW5naWZ5XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0eXBlZGpzb25fMS5zdHJpbmdpZnk7IH0gfSk7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/remix-typedjson/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/remix-typedjson/dist/remix.js":
/*!****************************************************!*\
  !*** ./node_modules/remix-typedjson/dist/remix.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.redirect = exports.deserializeRemix = exports.stringifyRemix = exports.useTypedRouteLoaderData = exports.useTypedFetcher = exports.useTypedActionData = exports.useTypedLoaderData = exports.TypedAwait = exports.typeddefer = exports.typedjson = void 0;\nconst jsx_runtime_1 = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\nconst react_1 = __webpack_require__(/*! @remix-run/react */ \"(ssr)/./node_modules/@remix-run/react/dist/esm/index.js\");\nconst server_runtime_1 = __webpack_require__(/*! @remix-run/server-runtime */ \"(ssr)/./node_modules/@remix-run/server-runtime/dist/esm/index.js\");\nconst _typedjson = __importStar(__webpack_require__(/*! ./typedjson */ \"(ssr)/./node_modules/remix-typedjson/dist/typedjson.js\"));\nconst typedjson = (data, init = {}) => {\n    let responseInit = typeof init === 'number' ? { status: init } : init;\n    let headers = new Headers(responseInit.headers);\n    if (!headers.has('Content-Type')) {\n        headers.set('Content-Type', 'application/json; charset=utf-8');\n    }\n    return new Response(stringifyRemix(data), {\n        ...responseInit,\n        headers,\n    });\n};\nexports.typedjson = typedjson;\nconst typeddefer = (data, init = {}) => {\n    // wrap any Promises in the data with new Promises that will serialize the\n    // resolved data and add the meta to the response\n    Object.entries(data).forEach(([key, value]) => {\n        if (value instanceof Promise) {\n            ;\n            data[key] = value.then(resolvedData => {\n                const { meta } = _typedjson.serialize(resolvedData);\n                if (meta) {\n                    ;\n                    resolvedData['$$meta'] = meta;\n                }\n                return resolvedData;\n            });\n        }\n        else {\n            const { meta } = _typedjson.serialize(data);\n            if (meta) {\n                ;\n                data['$$meta'] = meta;\n            }\n        }\n    });\n    let responseInit = typeof init === 'number' ? { status: init } : init;\n    return (0, server_runtime_1.defer)(data, responseInit);\n};\nexports.typeddefer = typeddefer;\nfunction TypedAwait(props) {\n    if (!props.children)\n        return null;\n    return ((0, jsx_runtime_1.jsx)(react_1.Await, { ...props, children: data => {\n            if (data === null)\n                return null;\n            let deserializedData = deserializeRemix(data);\n            return props.children(deserializedData);\n        } }));\n}\nexports.TypedAwait = TypedAwait;\nfunction useTypedLoaderData() {\n    const data = (0, react_1.useLoaderData)();\n    return deserializeRemix(data);\n}\nexports.useTypedLoaderData = useTypedLoaderData;\nfunction useTypedActionData() {\n    const data = (0, react_1.useActionData)();\n    return deserializeRemix(data);\n}\nexports.useTypedActionData = useTypedActionData;\nfunction useTypedFetcher(opts) {\n    const fetcher = (0, react_1.useFetcher)(opts);\n    if (fetcher.data) {\n        const newData = deserializeRemix(fetcher.data);\n        fetcher.data = newData ?? undefined;\n    }\n    return fetcher;\n}\nexports.useTypedFetcher = useTypedFetcher;\nfunction useTypedRouteLoaderData(id) {\n    const match = (0, react_1.useMatches)().find(match => match.id === id);\n    if (!match)\n        return undefined;\n    return deserializeRemix(match.data);\n}\nexports.useTypedRouteLoaderData = useTypedRouteLoaderData;\nfunction stringifyRemix(data) {\n    // prevent double JSON stringification\n    let { json, meta } = _typedjson.serialize(data);\n    if (json && meta) {\n        if (json.startsWith('{')) {\n            json = `${json.substring(0, json.length - 1)},\\\"$$meta\\\":${JSON.stringify(meta)}}`;\n        }\n        else if (json.startsWith('[')) {\n            json = `{\"$$obj\":${json},\"$$meta\":${JSON.stringify(meta)}}`;\n        }\n    }\n    return json;\n}\nexports.stringifyRemix = stringifyRemix;\nfunction deserializeRemix(data) {\n    if (!data)\n        return data;\n    if (data.$$obj) {\n        // handle arrays wrapped in an object\n        return data.$$meta\n            ? _typedjson.applyMeta(data.$$obj, data.$$meta)\n            : data.$$obj;\n    }\n    else if (data.$$meta) {\n        // handle object with $$meta key\n        // remove before applying meta\n        const meta = data.$$meta;\n        delete data.$$meta;\n        return _typedjson.applyMeta(data, meta);\n    }\n    return data;\n}\nexports.deserializeRemix = deserializeRemix;\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n *\n * @see https://remix.run/api/remix#redirect\n */\nconst redirect = (url, init = 302) => {\n    let responseInit = init;\n    if (typeof responseInit === 'number') {\n        responseInit = { status: responseInit };\n    }\n    else if (typeof responseInit.status === 'undefined') {\n        responseInit.status = 302;\n    }\n    let headers = new Headers(responseInit.headers);\n    headers.set('Location', url);\n    return new Response(null, {\n        ...responseInit,\n        headers,\n    });\n};\nexports.redirect = redirect;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/remix-typedjson/dist/remix.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/remix-typedjson/dist/typedjson.js":
/*!********************************************************!*\
  !*** ./node_modules/remix-typedjson/dist/typedjson.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.stringify = exports.serialize = exports.parse = exports.deserialize = exports.applyMeta = exports.splitKey = exports.registerCustomType = void 0;\nlet customTypeMap = new Map();\nfunction registerCustomType(entry) {\n    customTypeMap.set(entry.type, entry);\n}\nexports.registerCustomType = registerCustomType;\nfunction serialize(data) {\n    if (data === null)\n        return { json: 'null' };\n    if (data === undefined)\n        return { json: undefined };\n    const stack = [];\n    const keys = [''];\n    const meta = new Map();\n    const customTypeMapValues = Array.from(customTypeMap.values());\n    function replacer(key, value) {\n        function unwindStack() {\n            while (stack.length > 0) {\n                const top = stack[stack.length - 1];\n                if (top.iteration < top.count) {\n                    top.iteration++;\n                    return top;\n                }\n                if (top.type === 'object') {\n                    keys.pop();\n                }\n                stack.pop();\n            }\n        }\n        let entry = unwindStack();\n        if (entry) {\n            value = entry.value[key];\n        }\n        // handle dotted keys\n        if (key.includes('.')) {\n            key = `[${key}]`;\n        }\n        let metaKey = `${keys[keys.length - 1]}${key}`;\n        const valueType = typeof value;\n        if (valueType === 'object' && value !== null) {\n            let count = 0;\n            let t = 'undefined';\n            if (value instanceof Date) {\n                t = 'date';\n                value = value.toISOString();\n            }\n            else if (value instanceof Set) {\n                value = Array.from(value);\n                count = value.length;\n                t = 'set';\n            }\n            else if (value instanceof Map) {\n                value = Object.fromEntries(value);\n                count = Object.keys(value).length;\n                t = 'map';\n            }\n            else if (value instanceof Array) {\n                t = 'object';\n                count = value.length;\n            }\n            else if (value instanceof RegExp) {\n                t = 'regexp';\n                value = String(value);\n            }\n            else if (value instanceof Error) {\n                t = 'error';\n                value = { name: value.name, message: value.message, stack: value.stack };\n                // push error value to stack\n                stack.push({ type: 'object', value, count: 3, iteration: 0 });\n            }\n            else {\n                // check for custom types\n                let customType;\n                if (customTypeMapValues.length > 0) {\n                    customType = customTypeMapValues.find(entry => entry.is(value));\n                }\n                if (customType) {\n                    t = customType.type;\n                    value = customType.serialize(value);\n                }\n                else {\n                    count = Object.keys(value).length;\n                    t = 'object';\n                }\n            }\n            if (t !== 'object') {\n                meta.set(metaKey, t);\n            }\n            if (count !== 0) {\n                stack.push({ type: t, value, count, iteration: 0 });\n                if (key && t === 'object') {\n                    keys.push(`${metaKey}.`);\n                }\n                return value;\n            }\n        }\n        // handle non-object types\n        if (valueType === 'bigint') {\n            meta.set(metaKey, 'bigint');\n            return String(value);\n        }\n        if (valueType === 'number') {\n            if (value === Number.POSITIVE_INFINITY) {\n                meta.set(metaKey, 'infinity');\n                return 'Infinity';\n            }\n            if (value === Number.NEGATIVE_INFINITY) {\n                meta.set(metaKey, '-infinity');\n                return '-Infinity';\n            }\n            if (Number.isNaN(value)) {\n                meta.set(metaKey, 'nan');\n                return 'NaN';\n            }\n        }\n        if (typeof value === 'undefined') {\n            meta.set(metaKey, 'undefined');\n            return null;\n        }\n        return value;\n    }\n    const json = JSON.stringify(data, replacer);\n    return {\n        json,\n        meta: meta.size === 0 ? undefined : Object.fromEntries(meta.entries()),\n    };\n}\nexports.serialize = serialize;\nfunction deserialize({ json, meta }) {\n    if (typeof json === 'undefined') {\n        return undefined;\n    }\n    if (!json)\n        return null;\n    const result = JSON.parse(json);\n    if (meta) {\n        applyMeta(result, meta);\n    }\n    return result;\n}\nexports.deserialize = deserialize;\nconst splitKey = (key) => {\n    // key is a dotted path\n    // may contain escaped dots which are keys wrapped in []\n    // example [b.c].d => ['b.c', 'd']\n    const keys = [];\n    const parts = key.split('.');\n    for (let i = 0; i < parts.length; i++) {\n        if (parts[i].startsWith('[')) {\n            let k = parts[i].substring(1);\n            let j = i + 1;\n            while (!parts[j].endsWith(']')) {\n                k += `.${parts[j]}`;\n                j++;\n            }\n            k += `.${parts[j].slice(0, -1)}`;\n            keys.push(k);\n            i = j;\n        }\n        else {\n            keys.push(parts[i]);\n        }\n    }\n    return keys;\n};\nexports.splitKey = splitKey;\nfunction applyMeta(data, meta) {\n    const customTypeMapValues = Array.from(customTypeMap.values());\n    for (const key of Object.keys(meta)) {\n        const keys = (0, exports.splitKey)(key);\n        applyConversion(data, keys, meta[key]);\n    }\n    return data;\n    function applyConversion(data, keys, type, depth = 0) {\n        const key = keys[depth];\n        if (depth < keys.length - 1) {\n            applyConversion(data[key], keys, type, depth + 1);\n            return;\n        }\n        const value = data[key];\n        switch (type) {\n            case 'date':\n                data[key] = new Date(value);\n                break;\n            case 'set':\n                data[key] = new Set(value);\n                break;\n            case 'map':\n                data[key] = new Map(Object.entries(value));\n                break;\n            case 'regexp':\n                const match = /^\\/(.*)\\/([dgimsuy]*)$/.exec(value);\n                if (match) {\n                    data[key] = new RegExp(match[1], match[2]);\n                }\n                else {\n                    throw new Error(`Invalid regexp: ${value}`);\n                }\n                break;\n            case 'bigint':\n                data[key] = BigInt(value);\n                break;\n            case 'undefined':\n                data[key] = undefined;\n                break;\n            case 'infinity':\n                data[key] = Number.POSITIVE_INFINITY;\n                break;\n            case '-infinity':\n                data[key] = Number.NEGATIVE_INFINITY;\n                break;\n            case 'nan':\n                data[key] = NaN;\n                break;\n            case 'error':\n                const err = new Error(value.message);\n                err.name = value.name;\n                err.stack = value.stack;\n                data[key] = err;\n                break;\n            default:\n                // custom types\n                let customType = customTypeMap.get(type);\n                if (customType) {\n                    data[key] = customType.deserialize(value);\n                }\n        }\n    }\n}\nexports.applyMeta = applyMeta;\nfunction stringify(data, replacer, space) {\n    if (replacer || space) {\n        const { json, meta } = serialize(data);\n        const jsonObj = deserialize({ json });\n        return JSON.stringify({\n            json: jsonObj,\n            meta,\n        }, replacer, space);\n    }\n    return JSON.stringify(serialize(data));\n}\nexports.stringify = stringify;\nfunction parse(json) {\n    const result = JSON.parse(json);\n    return result ? deserialize(result) : null;\n}\nexports.parse = parse;\nconst typedjson = {\n    serialize,\n    stringify,\n    deserialize,\n    parse,\n    applyMeta,\n};\nexports[\"default\"] = typedjson;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/remix-typedjson/dist/typedjson.js\n");

/***/ })

};
;