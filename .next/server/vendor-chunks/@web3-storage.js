"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@web3-storage";
exports.ids = ["vendor-chunks/@web3-storage"];
exports.modules = {

/***/ "(ssr)/./node_modules/@web3-storage/multipart-parser/esm/src/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@web3-storage/multipart-parser/esm/src/index.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   iterateMultipart: () => (/* binding */ iterateMultipart),\n/* harmony export */   streamMultipart: () => (/* binding */ streamMultipart)\n/* harmony export */ });\n/* harmony import */ var _search_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./search.js */ \"(ssr)/./node_modules/@web3-storage/multipart-parser/esm/src/search.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@web3-storage/multipart-parser/esm/src/utils.js\");\n\n\nconst mergeArrays2 = Function.prototype.apply.bind(_utils_js__WEBPACK_IMPORTED_MODULE_1__.mergeArrays, undefined);\nconst dash = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.stringToArray)('--');\nconst CRLF = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.stringToArray)('\\r\\n');\nfunction parseContentDisposition(header) {\n  const parts = header.split(';').map(part => part.trim());\n  if (parts.shift() !== 'form-data') {\n    throw new Error('malformed content-disposition header: missing \"form-data\" in `' + JSON.stringify(parts) + '`');\n  }\n  const out = {};\n  for (const part of parts) {\n    const kv = part.split('=', 2);\n    if (kv.length !== 2) {\n      throw new Error('malformed content-disposition header: key-value pair not found - ' + part + ' in `' + header + '`');\n    }\n    const [name, value] = kv;\n    if (value[0] === '\"' && value[value.length - 1] === '\"') {\n      out[name] = value.slice(1, -1).replace(/\\\\\"/g, '\"');\n    } else if (value[0] !== '\"' && value[value.length - 1] !== '\"') {\n      out[name] = value;\n    } else if (value[0] === '\"' && value[value.length - 1] !== '\"' || value[0] !== '\"' && value[value.length - 1] === '\"') {\n      throw new Error('malformed content-disposition header: mismatched quotations in `' + header + '`');\n    }\n  }\n  if (!out.name) {\n    throw new Error('malformed content-disposition header: missing field name in `' + header + '`');\n  }\n  return out;\n}\nfunction parsePartHeaders(lines) {\n  const entries = [];\n  let disposition = false;\n  let line;\n  while (typeof (line = lines.shift()) !== 'undefined') {\n    const colon = line.indexOf(':');\n    if (colon === -1) {\n      throw new Error('malformed multipart-form header: missing colon');\n    }\n    const header = line.slice(0, colon).trim().toLowerCase();\n    const value = line.slice(colon + 1).trim();\n    switch (header) {\n    case 'content-disposition':\n      disposition = true;\n      entries.push(...Object.entries(parseContentDisposition(value)));\n      break;\n    case 'content-type':\n      entries.push([\n        'contentType',\n        value\n      ]);\n    }\n  }\n  if (!disposition) {\n    throw new Error('malformed multipart-form header: missing content-disposition');\n  }\n  return Object.fromEntries(entries);\n}\nasync function readHeaderLines(it, needle) {\n  let firstChunk = true;\n  let lastTokenWasMatch = false;\n  const headerLines = [[]];\n  const crlfSearch = new _search_js__WEBPACK_IMPORTED_MODULE_0__.StreamSearch(CRLF);\n  for (;;) {\n    const result = await it.next();\n    if (result.done) {\n      throw new Error('malformed multipart-form data: unexpected end of stream');\n    }\n    if (firstChunk && result.value !== _search_js__WEBPACK_IMPORTED_MODULE_0__.MATCH && (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.arraysEqual)(result.value.slice(0, 2), dash)) {\n      return [\n        undefined,\n        new Uint8Array()\n      ];\n    }\n    let chunk;\n    if (result.value !== _search_js__WEBPACK_IMPORTED_MODULE_0__.MATCH) {\n      chunk = result.value;\n    } else if (!lastTokenWasMatch) {\n      chunk = needle;\n    } else {\n      throw new Error('malformed multipart-form data: unexpected boundary');\n    }\n    if (!chunk.length) {\n      continue;\n    }\n    if (firstChunk) {\n      firstChunk = false;\n    }\n    const tokens = crlfSearch.feed(chunk);\n    for (const [i, token] of tokens.entries()) {\n      const isMatch = token === _search_js__WEBPACK_IMPORTED_MODULE_0__.MATCH;\n      if (!isMatch && !token.length) {\n        continue;\n      }\n      if (lastTokenWasMatch && isMatch) {\n        tokens.push(crlfSearch.end());\n        return [\n          headerLines.filter(chunks => chunks.length).map(mergeArrays2).map(_utils_js__WEBPACK_IMPORTED_MODULE_1__.arrayToString),\n          (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.mergeArrays)(...tokens.slice(i + 1).map(token => token === _search_js__WEBPACK_IMPORTED_MODULE_0__.MATCH ? CRLF : token))\n        ];\n      }\n      if (lastTokenWasMatch = isMatch) {\n        headerLines.push([]);\n      } else {\n        headerLines[headerLines.length - 1].push(token);\n      }\n    }\n  }\n}\nasync function* streamMultipart(body, boundary) {\n  const needle = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.mergeArrays)(dash, (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.stringToArray)(boundary));\n  const it = new _search_js__WEBPACK_IMPORTED_MODULE_0__.ReadableStreamSearch(needle, body)[Symbol.asyncIterator]();\n  for (;;) {\n    const result = await it.next();\n    if (result.done) {\n      return;\n    }\n    if (result.value === _search_js__WEBPACK_IMPORTED_MODULE_0__.MATCH) {\n      break;\n    }\n  }\n  const crlfSearch = new _search_js__WEBPACK_IMPORTED_MODULE_0__.StreamSearch(CRLF);\n  for (;;) {\n    const [headerLines, tail] = await readHeaderLines(it, needle);\n    if (!headerLines) {\n      return;\n    }\n    async function nextToken() {\n      const result = await it.next();\n      if (result.done) {\n        throw new Error('malformed multipart-form data: unexpected end of stream');\n      }\n      return result;\n    }\n    let trailingCRLF = false;\n    function feedChunk(chunk) {\n      const chunks = [];\n      for (const token of crlfSearch.feed(chunk)) {\n        if (trailingCRLF) {\n          chunks.push(CRLF);\n        }\n        if (!(trailingCRLF = token === _search_js__WEBPACK_IMPORTED_MODULE_0__.MATCH)) {\n          chunks.push(token);\n        }\n      }\n      return (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.mergeArrays)(...chunks);\n    }\n    let done = false;\n    async function nextChunk() {\n      const result = await nextToken();\n      let chunk;\n      if (result.value !== _search_js__WEBPACK_IMPORTED_MODULE_0__.MATCH) {\n        chunk = result.value;\n      } else if (!trailingCRLF) {\n        chunk = CRLF;\n      } else {\n        done = true;\n        return { value: crlfSearch.end() };\n      }\n      return { value: feedChunk(chunk) };\n    }\n    const bufferedChunks = [{ value: feedChunk(tail) }];\n    yield {\n      ...parsePartHeaders(headerLines),\n      data: {\n        [Symbol.asyncIterator]() {\n          return this;\n        },\n        async next() {\n          for (;;) {\n            const result = bufferedChunks.shift();\n            if (!result) {\n              break;\n            }\n            if (result.value.length > 0) {\n              return result;\n            }\n          }\n          for (;;) {\n            if (done) {\n              return {\n                done,\n                value: undefined\n              };\n            }\n            const result = await nextChunk();\n            if (result.value.length > 0) {\n              return result;\n            }\n          }\n        }\n      }\n    };\n    while (!done) {\n      bufferedChunks.push(await nextChunk());\n    }\n  }\n}\nasync function* iterateMultipart(body, boundary) {\n  for await (const part of streamMultipart(body, boundary)) {\n    const chunks = [];\n    for await (const chunk of part.data) {\n      chunks.push(chunk);\n    }\n    yield {\n      ...part,\n      data: (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.mergeArrays)(...chunks)\n    };\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdlYjMtc3RvcmFnZS9tdWx0aXBhcnQtcGFyc2VyL2VzbS9zcmMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUlxQjtBQU1EO0FBQ3BCLG1EQUFtRCxrREFBVztBQUM5RCxhQUFhLHdEQUFhO0FBQzFCLGFBQWEsd0RBQWE7QUFDMUI7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLG9EQUFZO0FBQ3JDLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1Qyw2Q0FBSyxJQUFJLHNEQUFXO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5Qiw2Q0FBSztBQUM5QjtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyw2Q0FBSztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0RUFBNEUsb0RBQWE7QUFDekYsVUFBVSxzREFBVywrQ0FBK0MsNkNBQUs7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsaUJBQWlCLHNEQUFXLE9BQU8sd0RBQWE7QUFDaEQsaUJBQWlCLDREQUFvQjtBQUNyQyxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsNkNBQUs7QUFDOUI7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLG9EQUFZO0FBQ3JDLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsNkNBQUs7QUFDNUM7QUFDQTtBQUNBO0FBQ0EsYUFBYSxzREFBVztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLDZDQUFLO0FBQ2hDO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsZUFBZTtBQUNmO0FBQ0EsOEJBQThCLHdCQUF3QjtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxzREFBVztBQUN2QjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9oYWdhci5pc2hheS9mYW5maWMvbm9kZV9tb2R1bGVzL0B3ZWIzLXN0b3JhZ2UvbXVsdGlwYXJ0LXBhcnNlci9lc20vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIFJlYWRhYmxlU3RyZWFtU2VhcmNoLFxuICBTdHJlYW1TZWFyY2gsXG4gIE1BVENIXG59IGZyb20gJy4vc2VhcmNoLmpzJztcbmltcG9ydCB7XG4gIGFycmF5c0VxdWFsLFxuICBzdHJpbmdUb0FycmF5LFxuICBhcnJheVRvU3RyaW5nLFxuICBtZXJnZUFycmF5c1xufSBmcm9tICcuL3V0aWxzLmpzJztcbmNvbnN0IG1lcmdlQXJyYXlzMiA9IEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseS5iaW5kKG1lcmdlQXJyYXlzLCB1bmRlZmluZWQpO1xuY29uc3QgZGFzaCA9IHN0cmluZ1RvQXJyYXkoJy0tJyk7XG5jb25zdCBDUkxGID0gc3RyaW5nVG9BcnJheSgnXFxyXFxuJyk7XG5mdW5jdGlvbiBwYXJzZUNvbnRlbnREaXNwb3NpdGlvbihoZWFkZXIpIHtcbiAgY29uc3QgcGFydHMgPSBoZWFkZXIuc3BsaXQoJzsnKS5tYXAocGFydCA9PiBwYXJ0LnRyaW0oKSk7XG4gIGlmIChwYXJ0cy5zaGlmdCgpICE9PSAnZm9ybS1kYXRhJykge1xuICAgIHRocm93IG5ldyBFcnJvcignbWFsZm9ybWVkIGNvbnRlbnQtZGlzcG9zaXRpb24gaGVhZGVyOiBtaXNzaW5nIFwiZm9ybS1kYXRhXCIgaW4gYCcgKyBKU09OLnN0cmluZ2lmeShwYXJ0cykgKyAnYCcpO1xuICB9XG4gIGNvbnN0IG91dCA9IHt9O1xuICBmb3IgKGNvbnN0IHBhcnQgb2YgcGFydHMpIHtcbiAgICBjb25zdCBrdiA9IHBhcnQuc3BsaXQoJz0nLCAyKTtcbiAgICBpZiAoa3YubGVuZ3RoICE9PSAyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ21hbGZvcm1lZCBjb250ZW50LWRpc3Bvc2l0aW9uIGhlYWRlcjoga2V5LXZhbHVlIHBhaXIgbm90IGZvdW5kIC0gJyArIHBhcnQgKyAnIGluIGAnICsgaGVhZGVyICsgJ2AnKTtcbiAgICB9XG4gICAgY29uc3QgW25hbWUsIHZhbHVlXSA9IGt2O1xuICAgIGlmICh2YWx1ZVswXSA9PT0gJ1wiJyAmJiB2YWx1ZVt2YWx1ZS5sZW5ndGggLSAxXSA9PT0gJ1wiJykge1xuICAgICAgb3V0W25hbWVdID0gdmFsdWUuc2xpY2UoMSwgLTEpLnJlcGxhY2UoL1xcXFxcIi9nLCAnXCInKTtcbiAgICB9IGVsc2UgaWYgKHZhbHVlWzBdICE9PSAnXCInICYmIHZhbHVlW3ZhbHVlLmxlbmd0aCAtIDFdICE9PSAnXCInKSB7XG4gICAgICBvdXRbbmFtZV0gPSB2YWx1ZTtcbiAgICB9IGVsc2UgaWYgKHZhbHVlWzBdID09PSAnXCInICYmIHZhbHVlW3ZhbHVlLmxlbmd0aCAtIDFdICE9PSAnXCInIHx8IHZhbHVlWzBdICE9PSAnXCInICYmIHZhbHVlW3ZhbHVlLmxlbmd0aCAtIDFdID09PSAnXCInKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ21hbGZvcm1lZCBjb250ZW50LWRpc3Bvc2l0aW9uIGhlYWRlcjogbWlzbWF0Y2hlZCBxdW90YXRpb25zIGluIGAnICsgaGVhZGVyICsgJ2AnKTtcbiAgICB9XG4gIH1cbiAgaWYgKCFvdXQubmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcignbWFsZm9ybWVkIGNvbnRlbnQtZGlzcG9zaXRpb24gaGVhZGVyOiBtaXNzaW5nIGZpZWxkIG5hbWUgaW4gYCcgKyBoZWFkZXIgKyAnYCcpO1xuICB9XG4gIHJldHVybiBvdXQ7XG59XG5mdW5jdGlvbiBwYXJzZVBhcnRIZWFkZXJzKGxpbmVzKSB7XG4gIGNvbnN0IGVudHJpZXMgPSBbXTtcbiAgbGV0IGRpc3Bvc2l0aW9uID0gZmFsc2U7XG4gIGxldCBsaW5lO1xuICB3aGlsZSAodHlwZW9mIChsaW5lID0gbGluZXMuc2hpZnQoKSkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgY29uc3QgY29sb24gPSBsaW5lLmluZGV4T2YoJzonKTtcbiAgICBpZiAoY29sb24gPT09IC0xKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ21hbGZvcm1lZCBtdWx0aXBhcnQtZm9ybSBoZWFkZXI6IG1pc3NpbmcgY29sb24nKTtcbiAgICB9XG4gICAgY29uc3QgaGVhZGVyID0gbGluZS5zbGljZSgwLCBjb2xvbikudHJpbSgpLnRvTG93ZXJDYXNlKCk7XG4gICAgY29uc3QgdmFsdWUgPSBsaW5lLnNsaWNlKGNvbG9uICsgMSkudHJpbSgpO1xuICAgIHN3aXRjaCAoaGVhZGVyKSB7XG4gICAgY2FzZSAnY29udGVudC1kaXNwb3NpdGlvbic6XG4gICAgICBkaXNwb3NpdGlvbiA9IHRydWU7XG4gICAgICBlbnRyaWVzLnB1c2goLi4uT2JqZWN0LmVudHJpZXMocGFyc2VDb250ZW50RGlzcG9zaXRpb24odmFsdWUpKSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdjb250ZW50LXR5cGUnOlxuICAgICAgZW50cmllcy5wdXNoKFtcbiAgICAgICAgJ2NvbnRlbnRUeXBlJyxcbiAgICAgICAgdmFsdWVcbiAgICAgIF0pO1xuICAgIH1cbiAgfVxuICBpZiAoIWRpc3Bvc2l0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdtYWxmb3JtZWQgbXVsdGlwYXJ0LWZvcm0gaGVhZGVyOiBtaXNzaW5nIGNvbnRlbnQtZGlzcG9zaXRpb24nKTtcbiAgfVxuICByZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKGVudHJpZXMpO1xufVxuYXN5bmMgZnVuY3Rpb24gcmVhZEhlYWRlckxpbmVzKGl0LCBuZWVkbGUpIHtcbiAgbGV0IGZpcnN0Q2h1bmsgPSB0cnVlO1xuICBsZXQgbGFzdFRva2VuV2FzTWF0Y2ggPSBmYWxzZTtcbiAgY29uc3QgaGVhZGVyTGluZXMgPSBbW11dO1xuICBjb25zdCBjcmxmU2VhcmNoID0gbmV3IFN0cmVhbVNlYXJjaChDUkxGKTtcbiAgZm9yICg7Oykge1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGl0Lm5leHQoKTtcbiAgICBpZiAocmVzdWx0LmRvbmUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignbWFsZm9ybWVkIG11bHRpcGFydC1mb3JtIGRhdGE6IHVuZXhwZWN0ZWQgZW5kIG9mIHN0cmVhbScpO1xuICAgIH1cbiAgICBpZiAoZmlyc3RDaHVuayAmJiByZXN1bHQudmFsdWUgIT09IE1BVENIICYmIGFycmF5c0VxdWFsKHJlc3VsdC52YWx1ZS5zbGljZSgwLCAyKSwgZGFzaCkpIHtcbiAgICAgIHJldHVybiBbXG4gICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgbmV3IFVpbnQ4QXJyYXkoKVxuICAgICAgXTtcbiAgICB9XG4gICAgbGV0IGNodW5rO1xuICAgIGlmIChyZXN1bHQudmFsdWUgIT09IE1BVENIKSB7XG4gICAgICBjaHVuayA9IHJlc3VsdC52YWx1ZTtcbiAgICB9IGVsc2UgaWYgKCFsYXN0VG9rZW5XYXNNYXRjaCkge1xuICAgICAgY2h1bmsgPSBuZWVkbGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignbWFsZm9ybWVkIG11bHRpcGFydC1mb3JtIGRhdGE6IHVuZXhwZWN0ZWQgYm91bmRhcnknKTtcbiAgICB9XG4gICAgaWYgKCFjaHVuay5sZW5ndGgpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoZmlyc3RDaHVuaykge1xuICAgICAgZmlyc3RDaHVuayA9IGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCB0b2tlbnMgPSBjcmxmU2VhcmNoLmZlZWQoY2h1bmspO1xuICAgIGZvciAoY29uc3QgW2ksIHRva2VuXSBvZiB0b2tlbnMuZW50cmllcygpKSB7XG4gICAgICBjb25zdCBpc01hdGNoID0gdG9rZW4gPT09IE1BVENIO1xuICAgICAgaWYgKCFpc01hdGNoICYmICF0b2tlbi5sZW5ndGgpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAobGFzdFRva2VuV2FzTWF0Y2ggJiYgaXNNYXRjaCkge1xuICAgICAgICB0b2tlbnMucHVzaChjcmxmU2VhcmNoLmVuZCgpKTtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICBoZWFkZXJMaW5lcy5maWx0ZXIoY2h1bmtzID0+IGNodW5rcy5sZW5ndGgpLm1hcChtZXJnZUFycmF5czIpLm1hcChhcnJheVRvU3RyaW5nKSxcbiAgICAgICAgICBtZXJnZUFycmF5cyguLi50b2tlbnMuc2xpY2UoaSArIDEpLm1hcCh0b2tlbiA9PiB0b2tlbiA9PT0gTUFUQ0ggPyBDUkxGIDogdG9rZW4pKVxuICAgICAgICBdO1xuICAgICAgfVxuICAgICAgaWYgKGxhc3RUb2tlbldhc01hdGNoID0gaXNNYXRjaCkge1xuICAgICAgICBoZWFkZXJMaW5lcy5wdXNoKFtdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGhlYWRlckxpbmVzW2hlYWRlckxpbmVzLmxlbmd0aCAtIDFdLnB1c2godG9rZW4pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uKiBzdHJlYW1NdWx0aXBhcnQoYm9keSwgYm91bmRhcnkpIHtcbiAgY29uc3QgbmVlZGxlID0gbWVyZ2VBcnJheXMoZGFzaCwgc3RyaW5nVG9BcnJheShib3VuZGFyeSkpO1xuICBjb25zdCBpdCA9IG5ldyBSZWFkYWJsZVN0cmVhbVNlYXJjaChuZWVkbGUsIGJvZHkpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpO1xuICBmb3IgKDs7KSB7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgaXQubmV4dCgpO1xuICAgIGlmIChyZXN1bHQuZG9uZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAocmVzdWx0LnZhbHVlID09PSBNQVRDSCkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIGNvbnN0IGNybGZTZWFyY2ggPSBuZXcgU3RyZWFtU2VhcmNoKENSTEYpO1xuICBmb3IgKDs7KSB7XG4gICAgY29uc3QgW2hlYWRlckxpbmVzLCB0YWlsXSA9IGF3YWl0IHJlYWRIZWFkZXJMaW5lcyhpdCwgbmVlZGxlKTtcbiAgICBpZiAoIWhlYWRlckxpbmVzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGFzeW5jIGZ1bmN0aW9uIG5leHRUb2tlbigpIHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGl0Lm5leHQoKTtcbiAgICAgIGlmIChyZXN1bHQuZG9uZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ21hbGZvcm1lZCBtdWx0aXBhcnQtZm9ybSBkYXRhOiB1bmV4cGVjdGVkIGVuZCBvZiBzdHJlYW0nKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGxldCB0cmFpbGluZ0NSTEYgPSBmYWxzZTtcbiAgICBmdW5jdGlvbiBmZWVkQ2h1bmsoY2h1bmspIHtcbiAgICAgIGNvbnN0IGNodW5rcyA9IFtdO1xuICAgICAgZm9yIChjb25zdCB0b2tlbiBvZiBjcmxmU2VhcmNoLmZlZWQoY2h1bmspKSB7XG4gICAgICAgIGlmICh0cmFpbGluZ0NSTEYpIHtcbiAgICAgICAgICBjaHVua3MucHVzaChDUkxGKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoISh0cmFpbGluZ0NSTEYgPSB0b2tlbiA9PT0gTUFUQ0gpKSB7XG4gICAgICAgICAgY2h1bmtzLnB1c2godG9rZW4pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbWVyZ2VBcnJheXMoLi4uY2h1bmtzKTtcbiAgICB9XG4gICAgbGV0IGRvbmUgPSBmYWxzZTtcbiAgICBhc3luYyBmdW5jdGlvbiBuZXh0Q2h1bmsoKSB7XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBuZXh0VG9rZW4oKTtcbiAgICAgIGxldCBjaHVuaztcbiAgICAgIGlmIChyZXN1bHQudmFsdWUgIT09IE1BVENIKSB7XG4gICAgICAgIGNodW5rID0gcmVzdWx0LnZhbHVlO1xuICAgICAgfSBlbHNlIGlmICghdHJhaWxpbmdDUkxGKSB7XG4gICAgICAgIGNodW5rID0gQ1JMRjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgICByZXR1cm4geyB2YWx1ZTogY3JsZlNlYXJjaC5lbmQoKSB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHsgdmFsdWU6IGZlZWRDaHVuayhjaHVuaykgfTtcbiAgICB9XG4gICAgY29uc3QgYnVmZmVyZWRDaHVua3MgPSBbeyB2YWx1ZTogZmVlZENodW5rKHRhaWwpIH1dO1xuICAgIHlpZWxkIHtcbiAgICAgIC4uLnBhcnNlUGFydEhlYWRlcnMoaGVhZGVyTGluZXMpLFxuICAgICAgZGF0YToge1xuICAgICAgICBbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgICAgICBhc3luYyBuZXh0KCkge1xuICAgICAgICAgIGZvciAoOzspIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGJ1ZmZlcmVkQ2h1bmtzLnNoaWZ0KCk7XG4gICAgICAgICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyZXN1bHQudmFsdWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBmb3IgKDs7KSB7XG4gICAgICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGRvbmUsXG4gICAgICAgICAgICAgICAgdmFsdWU6IHVuZGVmaW5lZFxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbmV4dENodW5rKCk7XG4gICAgICAgICAgICBpZiAocmVzdWx0LnZhbHVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIHdoaWxlICghZG9uZSkge1xuICAgICAgYnVmZmVyZWRDaHVua3MucHVzaChhd2FpdCBuZXh0Q2h1bmsoKSk7XG4gICAgfVxuICB9XG59XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24qIGl0ZXJhdGVNdWx0aXBhcnQoYm9keSwgYm91bmRhcnkpIHtcbiAgZm9yIGF3YWl0IChjb25zdCBwYXJ0IG9mIHN0cmVhbU11bHRpcGFydChib2R5LCBib3VuZGFyeSkpIHtcbiAgICBjb25zdCBjaHVua3MgPSBbXTtcbiAgICBmb3IgYXdhaXQgKGNvbnN0IGNodW5rIG9mIHBhcnQuZGF0YSkge1xuICAgICAgY2h1bmtzLnB1c2goY2h1bmspO1xuICAgIH1cbiAgICB5aWVsZCB7XG4gICAgICAuLi5wYXJ0LFxuICAgICAgZGF0YTogbWVyZ2VBcnJheXMoLi4uY2h1bmtzKVxuICAgIH07XG4gIH1cbn0iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3-storage/multipart-parser/esm/src/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3-storage/multipart-parser/esm/src/search.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@web3-storage/multipart-parser/esm/src/search.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MATCH: () => (/* binding */ MATCH),\n/* harmony export */   QueueableStreamSearch: () => (/* binding */ QueueableStreamSearch),\n/* harmony export */   ReadableStreamSearch: () => (/* binding */ ReadableStreamSearch),\n/* harmony export */   StreamSearch: () => (/* binding */ StreamSearch),\n/* harmony export */   allStrings: () => (/* binding */ allStrings),\n/* harmony export */   arrayIterator: () => (/* binding */ arrayIterator),\n/* harmony export */   chunksIterator: () => (/* binding */ chunksIterator),\n/* harmony export */   split: () => (/* binding */ split),\n/* harmony export */   splitChunks: () => (/* binding */ splitChunks),\n/* harmony export */   stringIterator: () => (/* binding */ stringIterator)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@web3-storage/multipart-parser/esm/src/utils.js\");\n\nfunction coerce(a) {\n  if (a instanceof Uint8Array) {\n    return index => a[index];\n  }\n  return a;\n}\nfunction jsmemcmp(buf1, pos1, buf2, pos2, len) {\n  const fn1 = coerce(buf1);\n  const fn2 = coerce(buf2);\n  for (let i = 0; i < len; ++i) {\n    if (fn1(pos1 + i) !== fn2(pos2 + i)) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction createOccurenceTable(s) {\n  const table = new Array(256).fill(s.length);\n  if (s.length > 1) {\n    for (let i = 0; i < s.length - 1; i++) {\n      table[s[i]] = s.length - 1 - i;\n    }\n  }\n  return table;\n}\nconst MATCH = Symbol('Match');\nclass StreamSearch {\n  constructor(needle) {\n    this._lookbehind = new Uint8Array();\n    if (typeof needle === 'string') {\n      this._needle = needle = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.stringToArray)(needle);\n    } else {\n      this._needle = needle;\n    }\n    this._lastChar = needle[needle.length - 1];\n    this._occ = createOccurenceTable(needle);\n  }\n  feed(chunk) {\n    let pos = 0;\n    let tokens;\n    const allTokens = [];\n    while (pos !== chunk.length) {\n      ;\n      [pos, ...tokens] = this._feed(chunk, pos);\n      allTokens.push(...tokens);\n    }\n    return allTokens;\n  }\n  end() {\n    const tail = this._lookbehind;\n    this._lookbehind = new Uint8Array();\n    return tail;\n  }\n  _feed(data, bufPos) {\n    const tokens = [];\n    let pos = -this._lookbehind.length;\n    if (pos < 0) {\n      while (pos < 0 && pos <= data.length - this._needle.length) {\n        const ch = this._charAt(data, pos + this._needle.length - 1);\n        if (ch === this._lastChar && this._memcmp(data, pos, this._needle.length - 1)) {\n          if (pos > -this._lookbehind.length) {\n            tokens.push(this._lookbehind.slice(0, this._lookbehind.length + pos));\n          }\n          tokens.push(MATCH);\n          this._lookbehind = new Uint8Array();\n          return [\n            pos + this._needle.length,\n            ...tokens\n          ];\n        } else {\n          pos += this._occ[ch];\n        }\n      }\n      if (pos < 0) {\n        while (pos < 0 && !this._memcmp(data, pos, data.length - pos)) {\n          pos++;\n        }\n      }\n      if (pos >= 0) {\n        tokens.push(this._lookbehind);\n        this._lookbehind = new Uint8Array();\n      } else {\n        const bytesToCutOff = this._lookbehind.length + pos;\n        if (bytesToCutOff > 0) {\n          tokens.push(this._lookbehind.slice(0, bytesToCutOff));\n          this._lookbehind = this._lookbehind.slice(bytesToCutOff);\n        }\n        this._lookbehind = Uint8Array.from(new Array(this._lookbehind.length + data.length), (_, i) => this._charAt(data, i - this._lookbehind.length));\n        return [\n          data.length,\n          ...tokens\n        ];\n      }\n    }\n    pos += bufPos;\n    while (pos <= data.length - this._needle.length) {\n      const ch = data[pos + this._needle.length - 1];\n      if (ch === this._lastChar && data[pos] === this._needle[0] && jsmemcmp(this._needle, 0, data, pos, this._needle.length - 1)) {\n        if (pos > bufPos) {\n          tokens.push(data.slice(bufPos, pos));\n        }\n        tokens.push(MATCH);\n        return [\n          pos + this._needle.length,\n          ...tokens\n        ];\n      } else {\n        pos += this._occ[ch];\n      }\n    }\n    if (pos < data.length) {\n      while (pos < data.length && (data[pos] !== this._needle[0] || !jsmemcmp(data, pos, this._needle, 0, data.length - pos))) {\n        ++pos;\n      }\n      if (pos < data.length) {\n        this._lookbehind = data.slice(pos);\n      }\n    }\n    if (pos > 0) {\n      tokens.push(data.slice(bufPos, pos < data.length ? pos : data.length));\n    }\n    return [\n      data.length,\n      ...tokens\n    ];\n  }\n  _charAt(data, pos) {\n    if (pos < 0) {\n      return this._lookbehind[this._lookbehind.length + pos];\n    }\n    return data[pos];\n  }\n  _memcmp(data, pos, len) {\n    return jsmemcmp(this._charAt.bind(this, data), pos, this._needle, 0, len);\n  }\n}\nclass ReadableStreamSearch {\n  constructor(needle, _readableStream) {\n    this._readableStream = _readableStream;\n    this._search = new StreamSearch(needle);\n  }\n  async *[Symbol.asyncIterator]() {\n    const reader = this._readableStream.getReader();\n    try {\n      while (true) {\n        const result = await reader.read();\n        if (result.done) {\n          break;\n        }\n        yield* this._search.feed(result.value);\n      }\n      const tail = this._search.end();\n      if (tail.length) {\n        yield tail;\n      }\n    } finally {\n      reader.releaseLock();\n    }\n  }\n}\nconst EOQ = Symbol('End of Queue');\nclass QueueableStreamSearch {\n  constructor(needle) {\n    this._chunksQueue = [];\n    this._closed = false;\n    this._search = new StreamSearch(needle);\n  }\n  push(...chunks) {\n    if (this._closed) {\n      throw new Error('cannot call push after close');\n    }\n    this._chunksQueue.push(...chunks);\n    if (this._notify) {\n      this._notify();\n    }\n  }\n  close() {\n    if (this._closed) {\n      throw new Error('close was already called');\n    }\n    this._closed = true;\n    this._chunksQueue.push(EOQ);\n    if (this._notify) {\n      this._notify();\n    }\n  }\n  async *[Symbol.asyncIterator]() {\n    while (true) {\n      let chunk;\n      while (!(chunk = this._chunksQueue.shift())) {\n        await new Promise(resolve => this._notify = resolve);\n        this._notify = undefined;\n      }\n      if (chunk === EOQ) {\n        break;\n      }\n      yield* this._search.feed(chunk);\n    }\n    const tail = this._search.end();\n    if (tail.length) {\n      yield tail;\n    }\n  }\n}\nfunction splitChunks(chunks, needle) {\n  const search = new StreamSearch(needle);\n  const outchunks = [[]];\n  for (const chunk of chunks) {\n    for (const token of search.feed(chunk)) {\n      if (token === MATCH) {\n        outchunks.push([]);\n      } else {\n        outchunks[outchunks.length - 1].push(token);\n      }\n    }\n  }\n  const end = search.end();\n  outchunks[outchunks.length - 1].push(end);\n  return outchunks.map(chunks => (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mergeArrays)(...chunks));\n}\nfunction split(buf, needle) {\n  return splitChunks([buf], needle);\n}\nasync function* chunksIterator(iter) {\n  let chunks = [];\n  for await (const value of iter) {\n    if (value === MATCH) {\n      yield chunks;\n      chunks = [];\n    } else {\n      chunks.push(value);\n    }\n  }\n  yield chunks;\n}\nasync function* stringIterator(iter) {\n  for await (const chunk of chunksIterator(iter)) {\n    yield chunk.map(_utils_js__WEBPACK_IMPORTED_MODULE_0__.arrayToString).join('');\n  }\n}\nasync function allStrings(iter) {\n  const segments = [];\n  for await (const value of stringIterator(iter)) {\n    segments.push(value);\n  }\n  return segments;\n}\nasync function* arrayIterator(iter) {\n  for await (const chunk of chunksIterator(iter)) {\n    yield (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mergeArrays)(...chunk);\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdlYjMtc3RvcmFnZS9tdWx0aXBhcnQtcGFyc2VyL2VzbS9zcmMvc2VhcmNoLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBSW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixTQUFTO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixrQkFBa0I7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsd0RBQWE7QUFDM0MsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsc0RBQVc7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0Isb0RBQWE7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsc0RBQVc7QUFDckI7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL2hhZ2FyLmlzaGF5L2ZhbmZpYy9ub2RlX21vZHVsZXMvQHdlYjMtc3RvcmFnZS9tdWx0aXBhcnQtcGFyc2VyL2VzbS9zcmMvc2VhcmNoLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIHN0cmluZ1RvQXJyYXksXG4gIG1lcmdlQXJyYXlzLFxuICBhcnJheVRvU3RyaW5nXG59IGZyb20gJy4vdXRpbHMuanMnO1xuZnVuY3Rpb24gY29lcmNlKGEpIHtcbiAgaWYgKGEgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgcmV0dXJuIGluZGV4ID0+IGFbaW5kZXhdO1xuICB9XG4gIHJldHVybiBhO1xufVxuZnVuY3Rpb24ganNtZW1jbXAoYnVmMSwgcG9zMSwgYnVmMiwgcG9zMiwgbGVuKSB7XG4gIGNvbnN0IGZuMSA9IGNvZXJjZShidWYxKTtcbiAgY29uc3QgZm4yID0gY29lcmNlKGJ1ZjIpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKGZuMShwb3MxICsgaSkgIT09IGZuMihwb3MyICsgaSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5mdW5jdGlvbiBjcmVhdGVPY2N1cmVuY2VUYWJsZShzKSB7XG4gIGNvbnN0IHRhYmxlID0gbmV3IEFycmF5KDI1NikuZmlsbChzLmxlbmd0aCk7XG4gIGlmIChzLmxlbmd0aCA+IDEpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHMubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICB0YWJsZVtzW2ldXSA9IHMubGVuZ3RoIC0gMSAtIGk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0YWJsZTtcbn1cbmNvbnN0IE1BVENIID0gU3ltYm9sKCdNYXRjaCcpO1xuY2xhc3MgU3RyZWFtU2VhcmNoIHtcbiAgY29uc3RydWN0b3IobmVlZGxlKSB7XG4gICAgdGhpcy5fbG9va2JlaGluZCA9IG5ldyBVaW50OEFycmF5KCk7XG4gICAgaWYgKHR5cGVvZiBuZWVkbGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aGlzLl9uZWVkbGUgPSBuZWVkbGUgPSBzdHJpbmdUb0FycmF5KG5lZWRsZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX25lZWRsZSA9IG5lZWRsZTtcbiAgICB9XG4gICAgdGhpcy5fbGFzdENoYXIgPSBuZWVkbGVbbmVlZGxlLmxlbmd0aCAtIDFdO1xuICAgIHRoaXMuX29jYyA9IGNyZWF0ZU9jY3VyZW5jZVRhYmxlKG5lZWRsZSk7XG4gIH1cbiAgZmVlZChjaHVuaykge1xuICAgIGxldCBwb3MgPSAwO1xuICAgIGxldCB0b2tlbnM7XG4gICAgY29uc3QgYWxsVG9rZW5zID0gW107XG4gICAgd2hpbGUgKHBvcyAhPT0gY2h1bmsubGVuZ3RoKSB7XG4gICAgICA7XG4gICAgICBbcG9zLCAuLi50b2tlbnNdID0gdGhpcy5fZmVlZChjaHVuaywgcG9zKTtcbiAgICAgIGFsbFRva2Vucy5wdXNoKC4uLnRva2Vucyk7XG4gICAgfVxuICAgIHJldHVybiBhbGxUb2tlbnM7XG4gIH1cbiAgZW5kKCkge1xuICAgIGNvbnN0IHRhaWwgPSB0aGlzLl9sb29rYmVoaW5kO1xuICAgIHRoaXMuX2xvb2tiZWhpbmQgPSBuZXcgVWludDhBcnJheSgpO1xuICAgIHJldHVybiB0YWlsO1xuICB9XG4gIF9mZWVkKGRhdGEsIGJ1ZlBvcykge1xuICAgIGNvbnN0IHRva2VucyA9IFtdO1xuICAgIGxldCBwb3MgPSAtdGhpcy5fbG9va2JlaGluZC5sZW5ndGg7XG4gICAgaWYgKHBvcyA8IDApIHtcbiAgICAgIHdoaWxlIChwb3MgPCAwICYmIHBvcyA8PSBkYXRhLmxlbmd0aCAtIHRoaXMuX25lZWRsZS5sZW5ndGgpIHtcbiAgICAgICAgY29uc3QgY2ggPSB0aGlzLl9jaGFyQXQoZGF0YSwgcG9zICsgdGhpcy5fbmVlZGxlLmxlbmd0aCAtIDEpO1xuICAgICAgICBpZiAoY2ggPT09IHRoaXMuX2xhc3RDaGFyICYmIHRoaXMuX21lbWNtcChkYXRhLCBwb3MsIHRoaXMuX25lZWRsZS5sZW5ndGggLSAxKSkge1xuICAgICAgICAgIGlmIChwb3MgPiAtdGhpcy5fbG9va2JlaGluZC5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRva2Vucy5wdXNoKHRoaXMuX2xvb2tiZWhpbmQuc2xpY2UoMCwgdGhpcy5fbG9va2JlaGluZC5sZW5ndGggKyBwb3MpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdG9rZW5zLnB1c2goTUFUQ0gpO1xuICAgICAgICAgIHRoaXMuX2xvb2tiZWhpbmQgPSBuZXcgVWludDhBcnJheSgpO1xuICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBwb3MgKyB0aGlzLl9uZWVkbGUubGVuZ3RoLFxuICAgICAgICAgICAgLi4udG9rZW5zXG4gICAgICAgICAgXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwb3MgKz0gdGhpcy5fb2NjW2NoXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHBvcyA8IDApIHtcbiAgICAgICAgd2hpbGUgKHBvcyA8IDAgJiYgIXRoaXMuX21lbWNtcChkYXRhLCBwb3MsIGRhdGEubGVuZ3RoIC0gcG9zKSkge1xuICAgICAgICAgIHBvcysrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocG9zID49IDApIHtcbiAgICAgICAgdG9rZW5zLnB1c2godGhpcy5fbG9va2JlaGluZCk7XG4gICAgICAgIHRoaXMuX2xvb2tiZWhpbmQgPSBuZXcgVWludDhBcnJheSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgYnl0ZXNUb0N1dE9mZiA9IHRoaXMuX2xvb2tiZWhpbmQubGVuZ3RoICsgcG9zO1xuICAgICAgICBpZiAoYnl0ZXNUb0N1dE9mZiA+IDApIHtcbiAgICAgICAgICB0b2tlbnMucHVzaCh0aGlzLl9sb29rYmVoaW5kLnNsaWNlKDAsIGJ5dGVzVG9DdXRPZmYpKTtcbiAgICAgICAgICB0aGlzLl9sb29rYmVoaW5kID0gdGhpcy5fbG9va2JlaGluZC5zbGljZShieXRlc1RvQ3V0T2ZmKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9sb29rYmVoaW5kID0gVWludDhBcnJheS5mcm9tKG5ldyBBcnJheSh0aGlzLl9sb29rYmVoaW5kLmxlbmd0aCArIGRhdGEubGVuZ3RoKSwgKF8sIGkpID0+IHRoaXMuX2NoYXJBdChkYXRhLCBpIC0gdGhpcy5fbG9va2JlaGluZC5sZW5ndGgpKTtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICBkYXRhLmxlbmd0aCxcbiAgICAgICAgICAuLi50b2tlbnNcbiAgICAgICAgXTtcbiAgICAgIH1cbiAgICB9XG4gICAgcG9zICs9IGJ1ZlBvcztcbiAgICB3aGlsZSAocG9zIDw9IGRhdGEubGVuZ3RoIC0gdGhpcy5fbmVlZGxlLmxlbmd0aCkge1xuICAgICAgY29uc3QgY2ggPSBkYXRhW3BvcyArIHRoaXMuX25lZWRsZS5sZW5ndGggLSAxXTtcbiAgICAgIGlmIChjaCA9PT0gdGhpcy5fbGFzdENoYXIgJiYgZGF0YVtwb3NdID09PSB0aGlzLl9uZWVkbGVbMF0gJiYganNtZW1jbXAodGhpcy5fbmVlZGxlLCAwLCBkYXRhLCBwb3MsIHRoaXMuX25lZWRsZS5sZW5ndGggLSAxKSkge1xuICAgICAgICBpZiAocG9zID4gYnVmUG9zKSB7XG4gICAgICAgICAgdG9rZW5zLnB1c2goZGF0YS5zbGljZShidWZQb3MsIHBvcykpO1xuICAgICAgICB9XG4gICAgICAgIHRva2Vucy5wdXNoKE1BVENIKTtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICBwb3MgKyB0aGlzLl9uZWVkbGUubGVuZ3RoLFxuICAgICAgICAgIC4uLnRva2Vuc1xuICAgICAgICBdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcG9zICs9IHRoaXMuX29jY1tjaF07XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwb3MgPCBkYXRhLmxlbmd0aCkge1xuICAgICAgd2hpbGUgKHBvcyA8IGRhdGEubGVuZ3RoICYmIChkYXRhW3Bvc10gIT09IHRoaXMuX25lZWRsZVswXSB8fCAhanNtZW1jbXAoZGF0YSwgcG9zLCB0aGlzLl9uZWVkbGUsIDAsIGRhdGEubGVuZ3RoIC0gcG9zKSkpIHtcbiAgICAgICAgKytwb3M7XG4gICAgICB9XG4gICAgICBpZiAocG9zIDwgZGF0YS5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5fbG9va2JlaGluZCA9IGRhdGEuc2xpY2UocG9zKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHBvcyA+IDApIHtcbiAgICAgIHRva2Vucy5wdXNoKGRhdGEuc2xpY2UoYnVmUG9zLCBwb3MgPCBkYXRhLmxlbmd0aCA/IHBvcyA6IGRhdGEubGVuZ3RoKSk7XG4gICAgfVxuICAgIHJldHVybiBbXG4gICAgICBkYXRhLmxlbmd0aCxcbiAgICAgIC4uLnRva2Vuc1xuICAgIF07XG4gIH1cbiAgX2NoYXJBdChkYXRhLCBwb3MpIHtcbiAgICBpZiAocG9zIDwgMCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2xvb2tiZWhpbmRbdGhpcy5fbG9va2JlaGluZC5sZW5ndGggKyBwb3NdO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YVtwb3NdO1xuICB9XG4gIF9tZW1jbXAoZGF0YSwgcG9zLCBsZW4pIHtcbiAgICByZXR1cm4ganNtZW1jbXAodGhpcy5fY2hhckF0LmJpbmQodGhpcywgZGF0YSksIHBvcywgdGhpcy5fbmVlZGxlLCAwLCBsZW4pO1xuICB9XG59XG5jbGFzcyBSZWFkYWJsZVN0cmVhbVNlYXJjaCB7XG4gIGNvbnN0cnVjdG9yKG5lZWRsZSwgX3JlYWRhYmxlU3RyZWFtKSB7XG4gICAgdGhpcy5fcmVhZGFibGVTdHJlYW0gPSBfcmVhZGFibGVTdHJlYW07XG4gICAgdGhpcy5fc2VhcmNoID0gbmV3IFN0cmVhbVNlYXJjaChuZWVkbGUpO1xuICB9XG4gIGFzeW5jICpbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgIGNvbnN0IHJlYWRlciA9IHRoaXMuX3JlYWRhYmxlU3RyZWFtLmdldFJlYWRlcigpO1xuICAgIHRyeSB7XG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCByZWFkZXIucmVhZCgpO1xuICAgICAgICBpZiAocmVzdWx0LmRvbmUpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICB5aWVsZCogdGhpcy5fc2VhcmNoLmZlZWQocmVzdWx0LnZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHRhaWwgPSB0aGlzLl9zZWFyY2guZW5kKCk7XG4gICAgICBpZiAodGFpbC5sZW5ndGgpIHtcbiAgICAgICAgeWllbGQgdGFpbDtcbiAgICAgIH1cbiAgICB9IGZpbmFsbHkge1xuICAgICAgcmVhZGVyLnJlbGVhc2VMb2NrKCk7XG4gICAgfVxuICB9XG59XG5jb25zdCBFT1EgPSBTeW1ib2woJ0VuZCBvZiBRdWV1ZScpO1xuY2xhc3MgUXVldWVhYmxlU3RyZWFtU2VhcmNoIHtcbiAgY29uc3RydWN0b3IobmVlZGxlKSB7XG4gICAgdGhpcy5fY2h1bmtzUXVldWUgPSBbXTtcbiAgICB0aGlzLl9jbG9zZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9zZWFyY2ggPSBuZXcgU3RyZWFtU2VhcmNoKG5lZWRsZSk7XG4gIH1cbiAgcHVzaCguLi5jaHVua3MpIHtcbiAgICBpZiAodGhpcy5fY2xvc2VkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2Nhbm5vdCBjYWxsIHB1c2ggYWZ0ZXIgY2xvc2UnKTtcbiAgICB9XG4gICAgdGhpcy5fY2h1bmtzUXVldWUucHVzaCguLi5jaHVua3MpO1xuICAgIGlmICh0aGlzLl9ub3RpZnkpIHtcbiAgICAgIHRoaXMuX25vdGlmeSgpO1xuICAgIH1cbiAgfVxuICBjbG9zZSgpIHtcbiAgICBpZiAodGhpcy5fY2xvc2VkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2Nsb3NlIHdhcyBhbHJlYWR5IGNhbGxlZCcpO1xuICAgIH1cbiAgICB0aGlzLl9jbG9zZWQgPSB0cnVlO1xuICAgIHRoaXMuX2NodW5rc1F1ZXVlLnB1c2goRU9RKTtcbiAgICBpZiAodGhpcy5fbm90aWZ5KSB7XG4gICAgICB0aGlzLl9ub3RpZnkoKTtcbiAgICB9XG4gIH1cbiAgYXN5bmMgKltTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgIGxldCBjaHVuaztcbiAgICAgIHdoaWxlICghKGNodW5rID0gdGhpcy5fY2h1bmtzUXVldWUuc2hpZnQoKSkpIHtcbiAgICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiB0aGlzLl9ub3RpZnkgPSByZXNvbHZlKTtcbiAgICAgICAgdGhpcy5fbm90aWZ5ID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgaWYgKGNodW5rID09PSBFT1EpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICB5aWVsZCogdGhpcy5fc2VhcmNoLmZlZWQoY2h1bmspO1xuICAgIH1cbiAgICBjb25zdCB0YWlsID0gdGhpcy5fc2VhcmNoLmVuZCgpO1xuICAgIGlmICh0YWlsLmxlbmd0aCkge1xuICAgICAgeWllbGQgdGFpbDtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIHNwbGl0Q2h1bmtzKGNodW5rcywgbmVlZGxlKSB7XG4gIGNvbnN0IHNlYXJjaCA9IG5ldyBTdHJlYW1TZWFyY2gobmVlZGxlKTtcbiAgY29uc3Qgb3V0Y2h1bmtzID0gW1tdXTtcbiAgZm9yIChjb25zdCBjaHVuayBvZiBjaHVua3MpIHtcbiAgICBmb3IgKGNvbnN0IHRva2VuIG9mIHNlYXJjaC5mZWVkKGNodW5rKSkge1xuICAgICAgaWYgKHRva2VuID09PSBNQVRDSCkge1xuICAgICAgICBvdXRjaHVua3MucHVzaChbXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXRjaHVua3Nbb3V0Y2h1bmtzLmxlbmd0aCAtIDFdLnB1c2godG9rZW4pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBjb25zdCBlbmQgPSBzZWFyY2guZW5kKCk7XG4gIG91dGNodW5rc1tvdXRjaHVua3MubGVuZ3RoIC0gMV0ucHVzaChlbmQpO1xuICByZXR1cm4gb3V0Y2h1bmtzLm1hcChjaHVua3MgPT4gbWVyZ2VBcnJheXMoLi4uY2h1bmtzKSk7XG59XG5mdW5jdGlvbiBzcGxpdChidWYsIG5lZWRsZSkge1xuICByZXR1cm4gc3BsaXRDaHVua3MoW2J1Zl0sIG5lZWRsZSk7XG59XG5hc3luYyBmdW5jdGlvbiogY2h1bmtzSXRlcmF0b3IoaXRlcikge1xuICBsZXQgY2h1bmtzID0gW107XG4gIGZvciBhd2FpdCAoY29uc3QgdmFsdWUgb2YgaXRlcikge1xuICAgIGlmICh2YWx1ZSA9PT0gTUFUQ0gpIHtcbiAgICAgIHlpZWxkIGNodW5rcztcbiAgICAgIGNodW5rcyA9IFtdO1xuICAgIH0gZWxzZSB7XG4gICAgICBjaHVua3MucHVzaCh2YWx1ZSk7XG4gICAgfVxuICB9XG4gIHlpZWxkIGNodW5rcztcbn1cbmFzeW5jIGZ1bmN0aW9uKiBzdHJpbmdJdGVyYXRvcihpdGVyKSB7XG4gIGZvciBhd2FpdCAoY29uc3QgY2h1bmsgb2YgY2h1bmtzSXRlcmF0b3IoaXRlcikpIHtcbiAgICB5aWVsZCBjaHVuay5tYXAoYXJyYXlUb1N0cmluZykuam9pbignJyk7XG4gIH1cbn1cbmFzeW5jIGZ1bmN0aW9uIGFsbFN0cmluZ3MoaXRlcikge1xuICBjb25zdCBzZWdtZW50cyA9IFtdO1xuICBmb3IgYXdhaXQgKGNvbnN0IHZhbHVlIG9mIHN0cmluZ0l0ZXJhdG9yKGl0ZXIpKSB7XG4gICAgc2VnbWVudHMucHVzaCh2YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHNlZ21lbnRzO1xufVxuYXN5bmMgZnVuY3Rpb24qIGFycmF5SXRlcmF0b3IoaXRlcikge1xuICBmb3IgYXdhaXQgKGNvbnN0IGNodW5rIG9mIGNodW5rc0l0ZXJhdG9yKGl0ZXIpKSB7XG4gICAgeWllbGQgbWVyZ2VBcnJheXMoLi4uY2h1bmspO1xuICB9XG59XG5leHBvcnQge1xuICBNQVRDSCxcbiAgUXVldWVhYmxlU3RyZWFtU2VhcmNoLFxuICBSZWFkYWJsZVN0cmVhbVNlYXJjaCxcbiAgU3RyZWFtU2VhcmNoLFxuICBhbGxTdHJpbmdzLFxuICBhcnJheUl0ZXJhdG9yLFxuICBjaHVua3NJdGVyYXRvcixcbiAgc3BsaXQsXG4gIHNwbGl0Q2h1bmtzLFxuICBzdHJpbmdJdGVyYXRvclxufTsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3-storage/multipart-parser/esm/src/search.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@web3-storage/multipart-parser/esm/src/utils.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@web3-storage/multipart-parser/esm/src/utils.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   arrayToString: () => (/* binding */ arrayToString),\n/* harmony export */   arraysEqual: () => (/* binding */ arraysEqual),\n/* harmony export */   mergeArrays: () => (/* binding */ mergeArrays),\n/* harmony export */   stringToArray: () => (/* binding */ stringToArray)\n/* harmony export */ });\nfunction stringToArray(s) {\n  const utf8 = unescape(encodeURIComponent(s));\n  return Uint8Array.from(utf8, (_, i) => utf8.charCodeAt(i));\n}\nfunction arrayToString(a) {\n  const utf8 = String.fromCharCode.apply(null, a);\n  return decodeURIComponent(escape(utf8));\n}\nfunction mergeArrays(...arrays) {\n  const out = new Uint8Array(arrays.reduce((total, arr) => total + arr.length, 0));\n  let offset = 0;\n  for (const arr of arrays) {\n    out.set(arr, offset);\n    offset += arr.length;\n  }\n  return out;\n}\nfunction arraysEqual(a, b) {\n  if (a.length !== b.length) {\n    return false;\n  }\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n  return true;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdlYjMtc3RvcmFnZS9tdWx0aXBhcnQtcGFyc2VyL2VzbS9zcmMvdXRpbHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixjQUFjO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL2hhZ2FyLmlzaGF5L2ZhbmZpYy9ub2RlX21vZHVsZXMvQHdlYjMtc3RvcmFnZS9tdWx0aXBhcnQtcGFyc2VyL2VzbS9zcmMvdXRpbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIHN0cmluZ1RvQXJyYXkocykge1xuICBjb25zdCB1dGY4ID0gdW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KHMpKTtcbiAgcmV0dXJuIFVpbnQ4QXJyYXkuZnJvbSh1dGY4LCAoXywgaSkgPT4gdXRmOC5jaGFyQ29kZUF0KGkpKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBhcnJheVRvU3RyaW5nKGEpIHtcbiAgY29uc3QgdXRmOCA9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgYSk7XG4gIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoZXNjYXBlKHV0ZjgpKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZUFycmF5cyguLi5hcnJheXMpIHtcbiAgY29uc3Qgb3V0ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXlzLnJlZHVjZSgodG90YWwsIGFycikgPT4gdG90YWwgKyBhcnIubGVuZ3RoLCAwKSk7XG4gIGxldCBvZmZzZXQgPSAwO1xuICBmb3IgKGNvbnN0IGFyciBvZiBhcnJheXMpIHtcbiAgICBvdXQuc2V0KGFyciwgb2Zmc2V0KTtcbiAgICBvZmZzZXQgKz0gYXJyLmxlbmd0aDtcbiAgfVxuICByZXR1cm4gb3V0O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGFycmF5c0VxdWFsKGEsIGIpIHtcbiAgaWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBmb3IgKGxldCBpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoYVtpXSAhPT0gYltpXSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn0iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@web3-storage/multipart-parser/esm/src/utils.js\n");

/***/ })

};
;